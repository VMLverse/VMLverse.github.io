<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-19T21:28:52-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">VMLverse</title><subtitle>&quot;Welcome to VMLverse - Join me as I embark on a continuous learning journey into the fascinating world of Machine Learning.&quot;</subtitle><author><name>Vimal Venugopal</name></author><entry><title type="html">Markdown Cheatsheet: Quick Reference for Commonly Used Syntax</title><link href="http://localhost:4000/posts/2023/06/08/markdown-cheatsheet.html" rel="alternate" type="text/html" title="Markdown Cheatsheet: Quick Reference for Commonly Used Syntax" /><published>2023-06-08T00:00:00-04:00</published><updated>2023-06-08T00:00:00-04:00</updated><id>http://localhost:4000/posts/2023/06/08/markdown-cheatsheet</id><content type="html" xml:base="http://localhost:4000/posts/2023/06/08/markdown-cheatsheet.html">&lt;h2 id=&quot;the-basics&quot;&gt;The Basics&lt;/h2&gt;

&lt;h3 id=&quot;newline&quot;&gt;Newline&lt;/h3&gt;
&lt;p&gt;You can create a newline by adding two spaces at the end of a line.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is the first line.  
This is the second line.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the first line.&lt;br /&gt;
This is the second line.&lt;/p&gt;

&lt;h3 id=&quot;new-paragraph&quot;&gt;New paragraph&lt;/h3&gt;
&lt;p&gt;You can create a new paragraph by leaving a blank line between the lines of text.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is the last line.

This is a new paragraph.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the last line.&lt;/p&gt;

&lt;p&gt;This is a new paragraph.&lt;/p&gt;

&lt;h3 id=&quot;bold--italic&quot;&gt;Bold &amp;amp; Italic&lt;/h3&gt;
&lt;p&gt;You can italicize text by using single asterisks (‘&lt;em&gt;’) or single underscores (_).&lt;br /&gt;
You can make text bold by using double asterisks (&lt;strong&gt;) or double underscores (__)&lt;br /&gt;
You can make text bold &amp;amp; italic by using triple asterisks (&lt;/strong&gt;&lt;/em&gt;) or triple underscores (___)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This is *italic* text.
This is _also_ italic text.

This is **bold** text.
This is __also__ bold text.

This is ***bold and italic*** text.
This is ___also bold and italic___ text.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is &lt;em&gt;italic&lt;/em&gt; text.&lt;br /&gt;
This is &lt;em&gt;also&lt;/em&gt; italic text.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;bold&lt;/strong&gt; text.&lt;br /&gt;
This is &lt;strong&gt;also&lt;/strong&gt; bold text.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;&lt;em&gt;bold and italic&lt;/em&gt;&lt;/strong&gt; text.&lt;br /&gt;
This is &lt;strong&gt;&lt;em&gt;also bold and italic&lt;/em&gt;&lt;/strong&gt; text.&lt;/p&gt;

&lt;h3 id=&quot;escape-characters&quot;&gt;Escape characters&lt;/h3&gt;
&lt;p&gt;You can use a backslash () to escape characters that have special meaning and prevent them from being interpreted as formatting or syntax.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;To display a literal asterisk: \*
To display a literal underscore: \_
To display a literal backslash: \\
To display a literal square bracket: \[ or \]
To display a literal hash symbol: \#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To display a literal asterisk: *&lt;br /&gt;
To display a literal underscore: _&lt;br /&gt;
To display a literal backslash: \&lt;br /&gt;
To display a literal square bracket: [ or ]&lt;br /&gt;
To display a literal hash symbol: #&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Inline Links:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[link text](url)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Visit our website](https://www.example.com)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Renders as: &lt;a href=&quot;https://www.google.com&quot;&gt;Visit our website&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inline Links with Title Attribute:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[link text](url &quot;title&quot;)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Open in new tab](https://www.example.com &quot;Opens in a new tab&quot;)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Renders as: &lt;a href=&quot;https://www.example.com&quot; title=&quot;Opens in a new tab Title&quot;&gt;Open in new tab&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Opens in a new tab Title&lt;/code&gt; is shown when hovering over the link.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reference-style Links:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[link text][reference]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[reference]: url &quot;title&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Learn more][example]
[example]: https://www.example.com &quot;Visit our website&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inline Image Links:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text](image url)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![Logo](https://www.example.com/images/logo.png)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Inline Image Links with Title Attribute:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text](image url &quot;title&quot;)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![Logo](https://www.example.com/images/logo.png &quot;Company Logo&quot;)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reference-style Image Links:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text][reference]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[reference]: image url &quot;title&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Logo][logo]
[logo]: https://www.example.com/images/logo.png &quot;Company Logo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link text&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alt text&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image url&lt;/code&gt; with your desired values. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute is optional and can be used to provide additional information when the user hovers over the link or image.&lt;/p&gt;

&lt;p&gt;These Markdown link syntaxes allow you to create various types of links within your Markdown content, enabling seamless navigation and enhancing user experience. I personally found the reference-style links to be useful since you can have a footer with all your referenced URLs in your article and maintain them in one place.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;
&lt;p&gt;To add images in Markdown, you can use the following syntax:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inline Image:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text](image URL)&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![Example Image](https://www.example.com/images/example.jpg)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reference-style Image:
    &lt;ul&gt;
      &lt;li&gt;Syntax: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;![alt text][reference]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[reference]: image URL&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Example Image][image-ref]
[image-ref]: https://www.example.com/images/example.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Markdown, the basic syntax does not provide direct control over image size or position. However, you can use HTML attributes within Markdown to achieve these effects. Here’s how you can size and position images using HTML attributes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sizing Images:
    &lt;ul&gt;
      &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;width&lt;/code&gt; attribute to specify the desired width of the image in pixels or percentage.&lt;/li&gt;
      &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;height&lt;/code&gt; attribute to specify the desired height of the image in pixels or percentage.&lt;/li&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example Image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Positioning Images:
    &lt;ul&gt;
      &lt;li&gt;Use CSS styling within an HTML &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element to control the positioning of the image.&lt;/li&gt;
      &lt;li&gt;Apply CSS properties like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;margin&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text-align&lt;/code&gt; to position the image as desired.&lt;/li&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float: right; margin: 10px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example Image&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Combining Sizing and Positioning:
    &lt;ul&gt;
      &lt;li&gt;You can combine the sizing and positioning techniques to control both the size and position of the image.&lt;/li&gt;
      &lt;li&gt;Example:
        &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float: right; margin: 10px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example Image&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;code-blocks&quot;&gt;Code Blocks&lt;/h3&gt;
&lt;p&gt;To write code in Markdown, you can use the following techniques:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Inline Code: Use backticks (`) to enclose the code within a sentence or paragraph. This helps differentiate code snippets from regular text. For example:&lt;/p&gt;

    &lt;p&gt;Markdown code: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`print(&quot;Hello, World!&quot;)`&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;Rendered output: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(&quot;Hello, World!&quot;)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code Blocks: To display a larger block of code, you can use fenced code blocks. Place triple backticks (```) on a separate line above and below the code. Optionally, specify the programming language for syntax highlighting after the opening backticks. For example:&lt;/p&gt;

    &lt;p&gt;Markdown code:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```python
def greet(name):
    print(&quot;Hello, &quot; + name + &quot;!&quot;)
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Rendered output:&lt;/p&gt;
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Note: Some Markdown processors may require a blank line before and after the fenced code block.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Syntax Highlighting: To enable syntax highlighting for the code blocks, specify the programming language after the opening backticks. This will apply appropriate color coding to improve code readability. For example:&lt;/p&gt;

    &lt;p&gt;Markdown code:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```javascript
function add(a, b) {
    return a + b;
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Rendered output:&lt;/p&gt;
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Commonly supported programming languages for syntax highlighting include JavaScript, Python, Java, C++, HTML, CSS, and more.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/help/hub/Markdown-Syntax.html&quot;&gt;Jetbrains Markdown Syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/getting-started/&quot;&gt;Markdown Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Vimal Venugopal</name></author><category term="posts" /><category term="markdown" /><category term="jekyll" /><summary type="html">This cheatsheet provides a concise reference for frequently used Markdown formatting, helping you create beautiful, well-structured content with ease.</summary></entry><entry><title type="html">Git Commands Simplified: A Beginner’s Guide</title><link href="http://localhost:4000/posts/2023/05/06/github_commands.html" rel="alternate" type="text/html" title="Git Commands Simplified: A Beginner’s Guide" /><published>2023-05-06T00:00:00-04:00</published><updated>2023-05-06T00:00:00-04:00</updated><id>http://localhost:4000/posts/2023/05/06/github_commands</id><content type="html" xml:base="http://localhost:4000/posts/2023/05/06/github_commands.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Git, the popular version control system, is an essential tool for developers and anyone working with code. In this comprehensive guide, we will delve into the fundamental Git commands, demystifying their purpose and providing practical examples. Whether you’re new to Git or looking to enhance your understanding, this blog post will equip you with the knowledge needed to navigate your projects with confidence.&lt;/p&gt;

&lt;!-- To gain a better understanding of Git terminology, I recommend watching educational videos on YouTube. These videos provide visual explanations and demonstrations, making it easier to grasp complex concepts. 
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/dVil8e0yptQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rFtUkk-sCqw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;initialization&quot;&gt;Initialization&lt;/h2&gt;
&lt;h3 id=&quot;git-init-creating-a-new-git-repository&quot;&gt;git init: Creating a new Git repository&lt;/h3&gt;
&lt;p&gt;Use the git init command to create a new, empty repository in the current directory.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Running this command creates a hidden .git directory. This .git directory is the brain/storage center for the repository. It holds all of the configuration files and directories and is where all of the commits are stored.&lt;/p&gt;
&lt;h3 id=&quot;git-config-customizing-git-configuration-settings&quot;&gt;git config: Customizing Git configuration settings&lt;/h3&gt;
&lt;p&gt;The “git config” command allows you to customize various Git configuration settings. These settings can be specific to your user account or applied to a particular Git repository.&lt;/p&gt;

&lt;p&gt;To set your name and email address for commits:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;your.email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These global configurations will be used for all your Git repositories unless overridden at the repository level.&lt;/p&gt;

&lt;p&gt;To view your Git configurations:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will display all the configurations currently set on your system.&lt;/p&gt;

&lt;p&gt;To configure settings at the repository level:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config user.name &quot;Your Name&quot;
$ git config user.email &quot;your.email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By omitting the “–global” flag, these settings will be specific to the current repository.&lt;/p&gt;

&lt;p&gt;Additionally, you can configure other settings such as preferred text editors, default branch names, and merge conflict resolution tools using the “git config” command.&lt;/p&gt;

&lt;p&gt;Remember, customizing Git configurations can enhance your workflow and improve the accuracy of your commit information. Take advantage of these configurations to make Git work seamlessly for you.&lt;/p&gt;

&lt;h2 id=&quot;basic-operations&quot;&gt;Basic Operations&lt;/h2&gt;

&lt;h3 id=&quot;git-add-adding-files-to-the-staging-area&quot;&gt;git add: Adding files to the staging area&lt;/h3&gt;
&lt;p&gt;The git add command is used to move files from the Working Directory to the Staging Index.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; … &amp;lt;fileN&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;takes a space-separated list of file names&lt;/li&gt;
  &lt;li&gt;alternatively, the period . can be used in place of a list of files to tell Git to add the current directory (and all nested files)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-commit-committing-changes-to-the-repository&quot;&gt;git commit: Committing changes to the repository&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;commit in a git repository records a snapshot of all the (tracked) files in your directory&lt;/li&gt;
  &lt;li&gt;like a giant copy and paste, but even better!&lt;/li&gt;
  &lt;li&gt;commits as lightweight as possible though, so it doesn’t just blindly copy the entire directory every time you commit
&lt;img src=&quot;/assets/images/github_commands/git_commit.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-status-checking-the-status-of-files&quot;&gt;git status: Checking the status of files&lt;/h3&gt;
&lt;p&gt;The git status command will display the current status of the repository.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I can’t stress enough how important it is to use this command all the time as you’re first learning Git. This command will:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tell us about new files that have been created in the Working Directory that Git hasn’t started tracking, yet&lt;/li&gt;
  &lt;li&gt;files that Git is tracking that have been modified&lt;/li&gt;
  &lt;li&gt;and a whole bunch of other things that we’ll be learning about throughout the rest of this article ;-)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-log-viewing-commit-history&quot;&gt;git log: Viewing commit history&lt;/h3&gt;
&lt;p&gt;The git log command is used to display all of the commits of a repository.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By default, this command displays:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the SHA&lt;/li&gt;
  &lt;li&gt;the author&lt;/li&gt;
  &lt;li&gt;the date&lt;/li&gt;
  &lt;li&gt;and the message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…of every commit in the repository. I stress the “By default” part of what Git displays because the git log command can display a lot more information than just this.&lt;/p&gt;

&lt;p&gt;Git uses the command line pager, Less, to page through all of the information. The important keys for Less are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to scroll down by a line, use j or ↓&lt;/li&gt;
  &lt;li&gt;to scroll up by a line, use k or ↑&lt;/li&gt;
  &lt;li&gt;to scroll down by a page, use the spacebar or the Page Down button&lt;/li&gt;
  &lt;li&gt;to scroll up by a page, use b or the Page Up button&lt;/li&gt;
  &lt;li&gt;to quit, use q&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;branching-and-merging&quot;&gt;Branching and Merging:&lt;/h2&gt;

&lt;h3 id=&quot;git-branch-creating-and-managing-branches&quot;&gt;git branch: Creating and managing branches&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;simply pointers to a specific commit – nothing more. branch early, and branch often
&lt;img src=&quot;/assets/images/github_commands/git_branch.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-checkout-switching-between-branches&quot;&gt;git checkout: Switching between branches&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;put us on the new branch before committing our changes
&lt;img src=&quot;/assets/images/github_commands/git_checkout.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-checkout--b-yourbranchname-creating-new-branch-and-switching-to-it&quot;&gt;git checkout -b [yourbranchname]: Creating new branch and Switching to it&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;create a new branch AND check it out at the same time
&lt;img src=&quot;/assets/images/github_commands/git_checkout_b.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-merge-combining-branches&quot;&gt;git merge: Combining branches&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Merging in Git creates a special commit that has two unique parents
&lt;img src=&quot;/assets/images/github_commands/git_merge.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collaboration-and-remote-repositories&quot;&gt;Collaboration and Remote Repositories&lt;/h2&gt;

&lt;h3 id=&quot;git-clone-cloning-a-remote-repository&quot;&gt;git clone: Cloning a remote repository&lt;/h3&gt;
&lt;p&gt;The git clone command is used to create an identical copy of an existing repository.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone &amp;lt;path-to-repository-to-clone&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;takes the path to an existing repository&lt;/li&gt;
  &lt;li&gt;by default will create a directory with the same name as the repository that’s being cloned&lt;/li&gt;
  &lt;li&gt;can be given a second argument that will be used as the name of the directory&lt;/li&gt;
  &lt;li&gt;will create the new repository inside of the current working directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-pull-updating-your-local-repository-with-remote-changes&quot;&gt;git pull: Updating your local repository with remote changes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The “git pull” command is used to update your local repository with the latest changes from a remote repository. - It combines the “git fetch” command, which retrieves the changes, and the “git merge” command, which incorporates those changes into your local branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-push-pushing-your-local-changes-to-a-remote-repository&quot;&gt;git push: Pushing your local changes to a remote repository&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The “git push” command is used to upload your local commits to a remote repository, making them accessible to others.&lt;/li&gt;
  &lt;li&gt;It updates the remote repository with your latest changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-remote-managing-remote-repositories&quot;&gt;git remote: Managing remote repositories&lt;/h3&gt;
&lt;p&gt;The “git remote” command allows you to manage remote repositories associated with your local repository. It helps you view, add, rename, or remove remote repositories.&lt;/p&gt;

&lt;p&gt;To view the remote repositories:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command displays a list of remote repositories along with their URLs.&lt;/p&gt;

&lt;p&gt;To add a remote repository:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote add &amp;lt;remote-name&amp;gt; &amp;lt;remote-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command associates a remote repository with a name and a URL.&lt;/p&gt;

&lt;p&gt;To rename a remote repository:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote rename &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command changes the name of an existing remote repository.&lt;/p&gt;

&lt;p&gt;To remove a remote repository:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote remove &amp;lt;remote-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command removes the association of a remote repository from your local repository.
These commands help you interact with remote repositories, facilitating collaboration and keeping your local and remote repositories in sync.&lt;/p&gt;

&lt;h2 id=&quot;advanced-git-commands&quot;&gt;Advanced Git Commands&lt;/h2&gt;

&lt;h3 id=&quot;head&quot;&gt;HEAD&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HEAD is the symbolic name for the currently checked out commit&lt;/li&gt;
  &lt;li&gt;it’s essentially what commit you’re working on top of.&lt;/li&gt;
  &lt;li&gt;HEAD always points to the most recent commit which is reflected in the working tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-revert&quot;&gt;git revert:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;git reset doesn’t work for remote branches that others are using.&lt;/li&gt;
  &lt;li&gt;In order to reverse changes and share those reversed changes with others, we need to use git revert.
&lt;img src=&quot;/assets/images/github_commands/git_revert.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-rebase-modifying-commit-history&quot;&gt;git rebase: Modifying commit history&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rebasing essentially takes a set of commits, “copies” them, and plops them down somewhere else
&lt;img src=&quot;/assets/images/github_commands/git_rebase.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-reset-undoing-changes-and-moving-the-head-pointer&quot;&gt;git reset: Undoing changes and moving the HEAD pointer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;reverses changes by moving a branch reference backwards in time to an older commit
&lt;img src=&quot;/assets/images/github_commands/git_reset.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;detach-head&quot;&gt;detach head:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Detaching HEAD just means attaching it to a commit instead of a branch.&lt;/li&gt;
  &lt;li&gt;To detach simply specify checkout by its hash
&lt;img src=&quot;/assets/images/github_commands/git_detach.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;relative-commits&quot;&gt;Relative commits:&lt;/h3&gt;
&lt;h4 id=&quot;caret--operator&quot;&gt;Caret (^) operator:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Moving upwards one commit at a time with ^&lt;/li&gt;
  &lt;li&gt;Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.&lt;/li&gt;
  &lt;li&gt;saying main^ is equivalent to “the first parent of main”
&lt;img src=&quot;/assets/images/github_commands/git_caret.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tilde--operator&quot;&gt;tilde (~) operator:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Moving upwards a number of times with ~&lt;num&gt;&lt;/num&gt;&lt;/li&gt;
  &lt;li&gt;tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend
&lt;img src=&quot;/assets/images/github_commands/git_tilde.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;branch-by-force-f&quot;&gt;branch by force(-f):&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;You can directly reassign a branch to a commit with the -f option
&lt;img src=&quot;/assets/images/github_commands/git_branch_f.gif&quot; alt=&quot;Alt text&quot; width=&quot;512&quot; height=&quot;434&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Understanding the core Git commands is essential for efficient collaboration, version control, and project management. By familiarizing yourself with these commands, you’ll gain the confidence to navigate Git repositories, resolve conflicts, and streamline your development workflow. Embrace the power of Git and elevate your coding journey with these fundamental commands.&lt;/p&gt;

&lt;p&gt;Remember, practice makes perfect when it comes to Git. Don’t hesitate to experiment with these commands in a test repository to deepen your understanding and discover their full potential. Happy coding with Git!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udacity.com/course/version-control-with-git--ud123&quot;&gt;Udacity’s course on Intro to Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learngitbranching.js.org/&quot;&gt;Learn git branching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://githowto.com/&quot;&gt;GitHowTo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Vimal Venugopal</name></author><category term="posts" /><category term="git" /><category term="github" /><category term="version control" /><summary type="html">In this beginner&apos;s guide, I break down the essential Git commands into easy-to-understand explanations and practical examples. From initializing a repository to collaborating with others, this guide will help you navigate the world of Git with confidence.</summary></entry><entry><title type="html">Building a Personal Site with Jekyll &amp;amp; Minimal Mistakes</title><link href="http://localhost:4000/posts/2023/01/06/jekyll-website.html" rel="alternate" type="text/html" title="Building a Personal Site with Jekyll &amp;amp; Minimal Mistakes" /><published>2023-01-06T00:00:00-05:00</published><updated>2023-01-06T00:00:00-05:00</updated><id>http://localhost:4000/posts/2023/01/06/jekyll-website</id><content type="html" xml:base="http://localhost:4000/posts/2023/01/06/jekyll-website.html">&lt;h2 id=&quot;prelude&quot;&gt;Prelude&lt;/h2&gt;
&lt;p&gt;With my job as PS consultant, I had no projects to host on github. I love writing and I wanted to write about the books I read or other occassional inspirations I get from random things. Ever since I thought about having a blog, my friend has been recommending me to start a github blog over wordpress so that I can have my software projects hosted as well. I went along the easier path with wordpress and had my &lt;a href=&quot;https://cognitivescrawls.wordpress.com/&quot;&gt;wordpress site&lt;/a&gt; opened in some time in 2019 where I occassionally try to write.&lt;/p&gt;

&lt;p&gt;Things changed when I took up &lt;a href=&quot;https://omscs.gatech.edu/&quot;&gt;OMSCS&lt;/a&gt; in 2020. I could understand why anyone would want to have their github site - to showcase their portfolio, projects, share articles they learnt. I finally wanted to build one github site for myself and been putting it off due to the MS assignments. Now that am closer to the end of my course, I googled on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github blogs&lt;/code&gt; and started my own site. After a few articles, I understood, each person has their own journey in starting up github blogs. In this article, am documenting my journey, the struggles I faced and the changes I did to the site that represents my personality.&lt;/p&gt;

&lt;h2 id=&quot;github-pages&quot;&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;The best thing about having a blog with Github pages is that it automatically hosts your pages which you can access with your own personal URL anywhere in the world. All within a few minutes. How cool is that! The instructions to host your github pages were explained pretty consicely in the &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages site&lt;/a&gt;. You cannot go wrong in that. I had my site up in a few minutes using plain markdown syntax. There was nothing fancy going on as I had no themes enabled since I didnt understand what was going on beneath the blackbox that caused different things which I didnt add in my website to popup. This is how my blog looked when I first created it in plain markdown syntax on github pages following the instructions from &lt;a href=&quot;https://docs.github.com/en/pages/quickstart&quot;&gt;github pages quickstart guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jekyll-website/github_pages.jpeg&quot; alt=&quot;My First Github Blog&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installing-jekyll&quot;&gt;Installing Jekyll&lt;/h2&gt;

&lt;p&gt;For sometime, I kept blogging github pages with plain .md files, but wanted to have a proper workflow and add more beautification to my site like other people did. I noticed most of the blogs I follow were using &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes theme&lt;/a&gt;.  I realized Jekyll was the technology behind converting .md files to static html webpages and a pre-requisite for Minimal Mistakes theme. I tried installing Jekyll on my laptop by following the &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;official Jekyll guide&lt;/a&gt;. However, I could not get past installing ruby as the preinstalled ruby on macOS kept conflicting with new install. After exhausting multiple recommendations, I finally tookup the step of upgrading macOS from BigSur to Ventura per this very helpful &lt;a href=&quot;https://www.moncefbelyamani.com/how-to-install-xcode-homebrew-git-rvm-ruby-on-mac/&quot;&gt;install ruby on MacOS&lt;/a&gt; article by Moncef. The rest of Moncef article helped resolved all my issues and I finally got Jekyll running on my laptop.&lt;/p&gt;

&lt;p&gt;Some of the instructions require you to update the system’s bash file. There are multiple bashes and I had trouble deciding which bash to update. You may find the following commands helpful.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To determine the shell you are currently using in a terminal or command prompt, you can use the following command:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This command will display the path to the shell executable that is currently being used as your default shell. The output will typically be the absolute path to the shell, such as /bin/bash, /bin/zsh, or /bin/sh.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;To update Bash file
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nano ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;If you run into “Permission denied” error message indicates that you do not have the necessary permissions to edit the .bash_profile file. In this case, you can try using the sudo command to edit the file with elevated privileges.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example command to open the .bash_profile file with sudo and the Nano editor:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Choose either ~/.bashrc or ~/.bash_profile based on your preference and the one that is being sourced by your Bash shell.&lt;/p&gt;

&lt;h2 id=&quot;understanding-github--jekyll&quot;&gt;Understanding Github &amp;amp; Jekyll&lt;/h2&gt;
&lt;p&gt;Once I had Jekyll, I was in search of an article that best explained what was going on. After searching multiple resources, I hit upon &lt;a href=&quot;https://www.youtube.com/watch?v=EvYs1idcGnM&amp;amp;list=PLWzwUIYZpnJuT0sH4BN56P5oWTdHJiTNq&amp;amp;index=4&amp;amp;ab_channel=BillRaymond&quot;&gt;Bill’s awesome 6 part Youtube series&lt;/a&gt; (Thank you Bill Raymond!). He takes it slow and clearly explains how github pages work, Jekyll theme is setup, how github’s remote Jekyll works and more. If you are following this article, I sincerely urge you to watch &lt;a href=&quot;https://www.youtube.com/watch?v=EvYs1idcGnM&amp;amp;list=PLWzwUIYZpnJuT0sH4BN56P5oWTdHJiTNq&amp;amp;index=4&amp;amp;ab_channel=BillRaymond&quot;&gt;Bill’s videos&lt;/a&gt;. Bill covers exactly what I wanted. Understanding the basics, Customizing the theme and setting up a workflow with Visual Studio Code. Below are some of the useful commands I learnt from Bill’s videos.&lt;/p&gt;

&lt;p&gt;To create a new Jekyll site in the working folder, you can use the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command will generate a new Jekyll site in the current directory.&lt;br /&gt;
If you already have files in the working folder and want to force the creation of a new site, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force&lt;/code&gt; option. This will overwrite any existing files that conflict with the Jekyll site structure. Here’s the command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To test your site with the Live Reload option, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --livereload&lt;/code&gt; command. This command starts a local Jekyll server and automatically refreshes the browser whenever you make changes to your site files. Here’s the command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--livereload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to run your local Jekyll server in a production environment, you can set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV&lt;/code&gt; environment variable to “production” before starting the server. This will enable optimizations and configurations specific to production. Here’s the command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By running the above command, Jekyll will start the server in a production environment, using the appropriate settings and configurations for that environment.&lt;br /&gt;
To manage dependencies in a Jekyll project, you can use Bundler. Bundler helps install and update the required gems (Ruby libraries) specified in your project’s Gemfile.&lt;br /&gt;
To install the required gems for your Jekyll project, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; command. This command reads the Gemfile in your project’s root directory and installs the specified gems. Here’s the command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you have already installed the gems and want to update them to their latest versions, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; command. This command updates the gems specified in your Gemfile to their latest versions. Here’s the command:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; should be run in the root directory of your Jekyll project, where the Gemfile is located. These commands ensure that your project has the necessary dependencies installed and up to date.&lt;br /&gt;
To open the Minima theme in macOS, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; command followed by the path to the theme. Here are the commands for opening the Minima theme and the Minimal Mistakes Jekyll theme:&lt;br /&gt;
To open the Minima theme:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bundle info &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; minima&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle info --path minima&lt;/code&gt; to get the path to the Minima theme and then opens it using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; command.&lt;br /&gt;
To open the Minimal Mistakes Jekyll theme:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;bundle info &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; minimal-mistakes-jekyll&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle info --path minimal-mistakes-jekyll&lt;/code&gt; to get the path to the Minimal Mistakes Jekyll theme and then opens it using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&quot;running-locally&quot;&gt;Running Locally&lt;/h2&gt;

&lt;p&gt;I found it extremely convenient to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; from Visual Studio, so I can render my blog from my local without having to publish it each time on github. However, one problem I often ran into was the local port kept being occupied and failed my exec jekyll serve commands.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll 3.9.3 | Error:  Address already in use - bind(2) for 127.0.0.1:4000
/Users/vimal/.rubies/ruby-3.1.3/lib/ruby/3.1.0/socket.rb:201:in `bind&apos;: Address already in use - bind(2) for 127.0.0.1:4000 (Errno::EADDRINUSE)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can get around the issue by finding out the Process ID used by the local port (4000) and then killing the process by Process ID. I ended up using the below two commands often.
To show what is using port 4000:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -wni tcp:4000 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then use the PID that comes with the result to run the kill process:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kill -9 3366
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;mimimal-mistakes&quot;&gt;Mimimal Mistakes&lt;/h2&gt;

&lt;p&gt;To get to know the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal mistakes theme&lt;/a&gt;, I would recommend going through the excellent &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;quick-start-guide&lt;/a&gt; put together by Michael. This is better over forking since you can keep track of the exact changes you are applying. The customization section help you setup the basics and getting to know your config.yaml file.&lt;/p&gt;

&lt;h2 id=&quot;customizations&quot;&gt;Customizations&lt;/h2&gt;
&lt;p&gt;Some of the customizations are not exposed through the config file. In those cases you can copy over the theme files and edit the source files directly. &lt;a href=&quot;https://www.youtube.com/watch?v=EvYs1idcGnM&amp;amp;list=PLWzwUIYZpnJuT0sH4BN56P5oWTdHJiTNq&amp;amp;index=4&amp;amp;ab_channel=BillRaymond&quot;&gt;Bill’s video series&lt;/a&gt; already covers this in detail. In addition, I hugely benefited from these series of articles by Katerina on her &lt;a href=&quot;https://www.cross-validated.com/Personal-Website-Mission-accomplished/&quot;&gt;website cross-validated&lt;/a&gt;. (Thanks Katerina!) Once you get a hang of making these changes, you can explore on your own and customize your site as you wish.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Building your own blog site can be a hugely rewarding experience. I also realized how far web development has come and how various technologies can interact and work together. I know I did not go into the specifics but the people in the articles I have linked have already covered this in great detail. I also did not go far into building my custom domain since I dont see the need for it yet. Feel free to comment if you have any specific question. Enjoy building your website!&lt;/p&gt;

&lt;!-- 
### Customize Avatar
**Filename:** _sass/minimal-mistakes/_sidebar.scss  
**Border &amp; Shape:** Increasing border-radius makes it eclipse. 0% if you want the square shape. Frame around avatar is controlled by padding and border.
```css
img {
    max-width: 200px;
    border-radius: 0%;

    @include breakpoint($large) {
      padding: 0px;
      border: 0px solid $border-color;
    }
  }
```
**Profile Opacity:** I also didn\&apos;t like the reduced opacity on the author profile when not hovering over it. So I turned it off.  
```css
@include breakpoint($large) {
    float: left;
    width: calc(#{$right-sidebar-width-narrow} - 1em);
    // opacity: 0.75; # original value
    opacity: 1.00;
    -webkit-transition: opacity 0.2s ease-in-out;
    transition: opacity 0.2s ease-in-out;
``` --&gt;</content><author><name>Vimal Venugopal</name></author><category term="posts" /><summary type="html">A guide detailing my process for building this website using the static site generator Jekyll and the theme Minimal Mistakes</summary></entry></feed>